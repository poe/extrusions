// Generated by SolidPython 1.1.3 on 2024-01-12 12:28:14


difference() {
	union() {
		translate(v = [90, 0, -11]) {
			rotate(a = 90, v = [0, 0, 1]) {
				difference() {
					union() {
						union();
						translate(v = [-35, 0, 0]) {
							rotate(a = [0, 90.0, 0.0]) {
								translate(v = [0, 0, 35.0]) {
									cube(center = true, size = [32.0000000000, 32.0000000000, 70.0]);
								}
							}
						}
						union();
					}
					union() {
						union();
						translate(v = [-35, 0, 0]) {
							rotate(a = [0, 90.0, 0.0]) {
								translate(v = [0, 0, 10]) {
									rotate(a = -90, v = [0, -1, 0]) {
										rotate(a = 90, v = [0, 0, 1]) {
											union() {
												union();
												translate(v = [0, -10, 0]) {
													rotate(a = -90, v = [1, 0, 0]) {
														polyhedron(convexity = 10, faces = [[0, 1, 4], [1, 5, 4], [1, 2, 5], [2, 6, 5], [2, 3, 6], [3, 7, 6], [3, 0, 7], [0, 4, 7], [3, 2, 1, 0], [4, 5, 6, 7]], points = [[-15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, -15.0000000000, 0.0000000000], [-15.0000000000, -15.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000]]);
													}
												}
												translate(v = [0, 51.0, 0]) {
													rotate(a = 180, v = [1, 0, 0]) {
														translate(v = [0, -10, 0]) {
															rotate(a = -90, v = [1, 0, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 4], [1, 5, 4], [1, 2, 5], [2, 6, 5], [2, 3, 6], [3, 7, 6], [3, 0, 7], [0, 4, 7], [3, 2, 1, 0], [4, 5, 6, 7]], points = [[-15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, -15.0000000000, 0.0000000000], [-15.0000000000, -15.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000]]);
															}
														}
													}
												}
												translate(v = [0, -10, 0]) {
													rotate(a = -90, v = [1, 0, 0]) {
														union() {
															polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
															mirror(v = [0, 1]) {
																polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
															}
															mirror(v = [1, 1]) {
																union() {
																	polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	mirror(v = [0, 1]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	}
																}
															}
															mirror(v = [1, -1]) {
																union() {
																	polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	mirror(v = [0, 1]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	}
																	mirror(v = [1, 1]) {
																		union() {
																			polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			mirror(v = [0, 1]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			}
																		}
																	}
																}
															}
														}
													}
												}
												union() {
													union();
													rotate(a = 180, v = [0, 1, 0]) {
														union() {
															translate(v = [0, 0, 14]) {
																cylinder($fn = 32, h = 4, r = 3.8750000000);
															}
															translate(v = [-3.8750000000, -12, 15]) {
																cube(size = [7.7500000000, 12, 4]);
															}
															union() {
																cylinder($fn = 16, h = 19, r = 2.0000000000);
																translate(v = [-2.0000000000, -12, 0]) {
																	cube(size = [4, 12, 19]);
																}
															}
															rotate(a = -90, v = [0, 1, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
															}
														}
													}
													rotate(a = 90, v = [0, 1, 0]) {
														union() {
															translate(v = [0, 0, 14]) {
																cylinder($fn = 32, h = 4, r = 3.8750000000);
															}
															translate(v = [-3.8750000000, -12, 15]) {
																cube(size = [7.7500000000, 12, 4]);
															}
															union() {
																cylinder($fn = 16, h = 19, r = 2.0000000000);
																translate(v = [-2.0000000000, -12, 0]) {
																	cube(size = [4, 12, 19]);
																}
															}
															rotate(a = -90, v = [0, 1, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
															}
														}
													}
													union() {
														translate(v = [0, 0, 14]) {
															cylinder($fn = 32, h = 4, r = 3.8750000000);
														}
														translate(v = [-3.8750000000, -12, 15]) {
															cube(size = [7.7500000000, 12, 4]);
														}
														union() {
															cylinder($fn = 16, h = 19, r = 2.0000000000);
															translate(v = [-2.0000000000, -12, 0]) {
																cube(size = [4, 12, 19]);
															}
														}
														rotate(a = -90, v = [0, 1, 0]) {
															polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
														}
													}
													rotate(a = 270, v = [0, 1, 0]) {
														union() {
															translate(v = [0, 0, 14]) {
																cylinder($fn = 32, h = 4, r = 3.8750000000);
															}
															translate(v = [-3.8750000000, -12, 15]) {
																cube(size = [7.7500000000, 12, 4]);
															}
															union() {
																cylinder($fn = 16, h = 19, r = 2.0000000000);
																translate(v = [-2.0000000000, -12, 0]) {
																	cube(size = [4, 12, 19]);
																}
															}
															rotate(a = -90, v = [0, 1, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															rotate(a = 180, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															rotate(a = 90, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															union() {
																translate(v = [0, 0, 14]) {
																	cylinder($fn = 32, h = 4, r = 3.8750000000);
																}
																translate(v = [-3.8750000000, -12, 15]) {
																	cube(size = [7.7500000000, 12, 4]);
																}
																union() {
																	cylinder($fn = 16, h = 19, r = 2.0000000000);
																	translate(v = [-2.0000000000, -12, 0]) {
																		cube(size = [4, 12, 19]);
																	}
																}
																rotate(a = -90, v = [0, 1, 0]) {
																	polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																}
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															rotate(a = 270, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		difference() {
			cube(center = true, size = [160, 100, 10]);
			union() {
				union();
				translate(v = [75.0000000000, 45.0000000000, 5.0000000000]) {
					cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
				}
				translate(v = [-75.0000000000, 45.0000000000, 5.0000000000]) {
					cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
				}
				translate(v = [75.0000000000, -45.0000000000, 5.0000000000]) {
					cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
				}
				translate(v = [-75.0000000000, -45.0000000000, 5.0000000000]) {
					cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
				}
			}
		}
	}
	translate(v = [0, 0, -150]) {
		cube(center = true, size = [300, 300, 300]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python3
import sys
from math import cos, radians, sin, pi, tau
from pathlib import Path

from solid import *
from solid.utils import *

from typing import Set, Sequence, List, Callable, Optional, Union, Iterable, Tuple

import numpy as np

import extrusion_fittings as ef

class mount():
	def __init__(self,board_length = 160,board_width = 100,screw_offset = 10,screw_dia = 3.5,mount_thickness = 10):
		self.board_length = board_length
		self.board_width = board_width
		self.screw_offset = screw_offset
		self.screw_length = board_length - screw_offset
		self.screw_width = board_width - screw_offset
		self.screw_dia = screw_dia
		self.mount_thickness = mount_thickness

	def screws(self) -> OpenSCADObject:
		c = cylinder(r=self.screw_dia/2, h=20, segments = 32, center=True)
		screw = OpenSCADObject(name="union",params={})
		screw += translate([self.screw_length/2,self.screw_width/2,self.mount_thickness/2])(c)
		screw += translate([-self.screw_length/2,self.screw_width/2,self.mount_thickness/2])(c)
		screw += translate([self.screw_length/2,-self.screw_width/2,self.mount_thickness/2])(c)
		screw += translate([-self.screw_length/2,-self.screw_width/2,self.mount_thickness/2])(c)
		return screw

	def plate(self) -> OpenSCADObject:
		p = cube([self.board_length,self.board_width,self.mount_thickness],center = True)
		p-= self.screws()
		return p

	def bisect_floor(self,input) -> OpenSCADObject:
		size = 300
		floor = translate([0,0,-150])(cube([300,300,300],center = True))
		return input - floor


if __name__ == "__main__":
	out_dir = sys.argv[1] if len(sys.argv) > 1 else Path(__file__).parent

	e = ef.Fittings(35)
	a = e.tube()
	a = rotate(a=90,v=[0,0,1])(a)
	m = mount()	
	a = translate([90,0,-11])(a)
	a += m.plate()
	a = m.bisect_floor(a)

	file_out = scad_render_to_file(a,  out_dir=out_dir, include_orig_code=True)
	print(f"{__file__}: SCAD file written to: \n{file_out}")
 
 
************************************************/

// Generated by SolidPython 1.1.3 on 2024-01-09 19:43:56


difference() {
	translate(v = [0, 0, -4]) {
		rotate(a = 25, v = [0, 1, 0]) {
			union() {
				difference() {
					cube(center = true, size = [54.3000000000, 54.3000000000, 35.5000000000]);
					union() {
						cube(center = true, size = [42.3000000000, 42.3000000000, 23.5000000000]);
						union() {
							translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
								cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
							}
							rotate(a = 90, v = [0, 0, 1]) {
								translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
									cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
								}
							}
							rotate(a = 180, v = [0, 0, 1]) {
								union() {
									translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
										cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
									}
									rotate(a = 90, v = [0, 0, 1]) {
										translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
											cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
										}
									}
								}
							}
							rotate(a = 270, v = [0, 0, 1]) {
								union() {
									translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
										cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
									}
									rotate(a = 90, v = [0, 0, 1]) {
										translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
											cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
										}
									}
									rotate(a = 180, v = [0, 0, 1]) {
										union() {
											translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
												cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
											}
											rotate(a = 90, v = [0, 0, 1]) {
												translate(v = [15.5000000000, 15.5000000000, 11.7500000000]) {
													cylinder($fn = 32, center = true, h = 20, r = 1.7500000000);
												}
											}
										}
									}
								}
							}
						}
						translate(v = [0, 0, 11.7500000000]) {
							union() {
								cylinder($fn = 32, center = true, h = 6, r = 11.0000000000);
								translate(v = [11.0000000000, 0, 0]) {
									cube(center = true, size = [22, 22, 6]);
								}
							}
						}
						translate(v = [0, 0, 23.5000000000]) {
							union() {
								cylinder($fn = 32, center = true, h = 20, r = 3);
								translate(v = [13.5750000000, 0, -4]) {
									cube(center = true, size = [27.1500000000, 6, 20]);
								}
							}
						}
					}
				}
				translate(v = [-39, 0, -18]) {
					rotate(a = 90, v = [0, 1, 0]) {
						difference() {
							union() {
								union();
								translate(v = [-35, 0, 0]) {
									rotate(a = [0, 90.0, 0.0]) {
										translate(v = [0, 0, 35.0]) {
											cube(center = true, size = [32.0000000000, 32.0000000000, 70.0]);
										}
									}
								}
								union();
							}
							union() {
								union();
								translate(v = [-35, 0, 0]) {
									rotate(a = [0, 90.0, 0.0]) {
										translate(v = [0, 0, 10]) {
											rotate(a = -90, v = [0, -1, 0]) {
												rotate(a = 90, v = [0, 0, 1]) {
													union() {
														union();
														translate(v = [0, -10, 0]) {
															rotate(a = -90, v = [1, 0, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 4], [1, 5, 4], [1, 2, 5], [2, 6, 5], [2, 3, 6], [3, 7, 6], [3, 0, 7], [0, 4, 7], [3, 2, 1, 0], [4, 5, 6, 7]], points = [[-15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, -15.0000000000, 0.0000000000], [-15.0000000000, -15.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000]]);
															}
														}
														translate(v = [0, 51.0, 0]) {
															rotate(a = 180, v = [1, 0, 0]) {
																translate(v = [0, -10, 0]) {
																	rotate(a = -90, v = [1, 0, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 4], [1, 5, 4], [1, 2, 5], [2, 6, 5], [2, 3, 6], [3, 7, 6], [3, 0, 7], [0, 4, 7], [3, 2, 1, 0], [4, 5, 6, 7]], points = [[-15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, -15.0000000000, 0.0000000000], [-15.0000000000, -15.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000]]);
																	}
																}
															}
														}
														translate(v = [0, -10, 0]) {
															rotate(a = -90, v = [1, 0, 0]) {
																union() {
																	polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	mirror(v = [0, 1]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	}
																	mirror(v = [1, 1]) {
																		union() {
																			polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			mirror(v = [0, 1]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			}
																		}
																	}
																	mirror(v = [1, -1]) {
																		union() {
																			polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			mirror(v = [0, 1]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			}
																			mirror(v = [1, 1]) {
																				union() {
																					polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																					mirror(v = [0, 1]) {
																						polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
														union() {
															union();
															rotate(a = 180, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
															rotate(a = 90, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
															union() {
																translate(v = [0, 0, 14]) {
																	cylinder($fn = 32, h = 4, r = 3.8750000000);
																}
																translate(v = [-3.8750000000, -12, 15]) {
																	cube(size = [7.7500000000, 12, 4]);
																}
																union() {
																	cylinder($fn = 16, h = 19, r = 2.0000000000);
																	translate(v = [-2.0000000000, -12, 0]) {
																		cube(size = [4, 12, 19]);
																	}
																}
																rotate(a = -90, v = [0, 1, 0]) {
																	polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																}
															}
															rotate(a = 270, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
															translate(v = [0, 51.0, 0]) {
																rotate(a = 180, v = [1, 0, 0]) {
																	rotate(a = 180, v = [0, 1, 0]) {
																		union() {
																			translate(v = [0, 0, 14]) {
																				cylinder($fn = 32, h = 4, r = 3.8750000000);
																			}
																			translate(v = [-3.8750000000, -12, 15]) {
																				cube(size = [7.7500000000, 12, 4]);
																			}
																			union() {
																				cylinder($fn = 16, h = 19, r = 2.0000000000);
																				translate(v = [-2.0000000000, -12, 0]) {
																					cube(size = [4, 12, 19]);
																				}
																			}
																			rotate(a = -90, v = [0, 1, 0]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																			}
																		}
																	}
																}
															}
															translate(v = [0, 51.0, 0]) {
																rotate(a = 180, v = [1, 0, 0]) {
																	rotate(a = 90, v = [0, 1, 0]) {
																		union() {
																			translate(v = [0, 0, 14]) {
																				cylinder($fn = 32, h = 4, r = 3.8750000000);
																			}
																			translate(v = [-3.8750000000, -12, 15]) {
																				cube(size = [7.7500000000, 12, 4]);
																			}
																			union() {
																				cylinder($fn = 16, h = 19, r = 2.0000000000);
																				translate(v = [-2.0000000000, -12, 0]) {
																					cube(size = [4, 12, 19]);
																				}
																			}
																			rotate(a = -90, v = [0, 1, 0]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																			}
																		}
																	}
																}
															}
															translate(v = [0, 51.0, 0]) {
																rotate(a = 180, v = [1, 0, 0]) {
																	union() {
																		translate(v = [0, 0, 14]) {
																			cylinder($fn = 32, h = 4, r = 3.8750000000);
																		}
																		translate(v = [-3.8750000000, -12, 15]) {
																			cube(size = [7.7500000000, 12, 4]);
																		}
																		union() {
																			cylinder($fn = 16, h = 19, r = 2.0000000000);
																			translate(v = [-2.0000000000, -12, 0]) {
																				cube(size = [4, 12, 19]);
																			}
																		}
																		rotate(a = -90, v = [0, 1, 0]) {
																			polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																		}
																	}
																}
															}
															translate(v = [0, 51.0, 0]) {
																rotate(a = 180, v = [1, 0, 0]) {
																	rotate(a = 270, v = [0, 1, 0]) {
																		union() {
																			translate(v = [0, 0, 14]) {
																				cylinder($fn = 32, h = 4, r = 3.8750000000);
																			}
																			translate(v = [-3.8750000000, -12, 15]) {
																				cube(size = [7.7500000000, 12, 4]);
																			}
																			union() {
																				cylinder($fn = 16, h = 19, r = 2.0000000000);
																				translate(v = [-2.0000000000, -12, 0]) {
																					cube(size = [4, 12, 19]);
																				}
																			}
																			rotate(a = -90, v = [0, 1, 0]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	translate(v = [0, 0, -150]) {
		cube(center = true, size = [300, 300, 300]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python3
import sys
from math import cos, radians, sin, pi, tau
from pathlib import Path

from solid import *
from solid.utils import *

from typing import Set, Sequence, List, Callable, Optional, Union, Iterable, Tuple

import numpy as np

import extrusion_fittings as ef

class mount():
	def __init__(self,stepper_size = 42.3,screw_dist = 31,screw_dia = 3.5,motor_thickness = 23.5, bump_dia = 22, mount_thick = 6):
		self.stepper_size = stepper_size
		self.screw_dist = screw_dist
		self.screw_dia = screw_dia
		self.motor_thickness = motor_thickness
		self.bump_dia = bump_dia
		self.total_size = stepper_size + mount_thick*2
		self.total_thick = motor_thickness + mount_thick*2

	def screws(self) -> OpenSCADObject:
		screw = cylinder(r=self.screw_dia/2, h=20, segments = 32, center=True)
		screw = translate([self.screw_dist/2,self.screw_dist/2,self.motor_thickness/2])(screw)
		screw += rotate(a=90,v=(0,0,1))(screw)
		screw += rotate(a=180,v=(0,0,1))(screw)
		screw += rotate(a=270,v=(0,0,1))(screw)
		return screw

	def bump(self) -> OpenSCADObject:
		bump = cylinder(r = self.bump_dia/2,h=6,segments = 32,center=True)
		slot = cube([self.bump_dia,self.bump_dia,6],center=True)
		slot = translate([self.bump_dia/2,0,0])(slot)
		bump += slot
		bump = translate([0,0,self.motor_thickness/2])(bump)
		return bump

	def shaft(self) -> OpenSCADObject:
		shaft = cylinder(r = 3,h=20,segments=32,center=True)
		slot = cube([self.total_size/2,6,20],center=True)
		slot = translate([self.total_size/4,0,-4])(slot)
		shaft += slot
		shaft = translate([0,0,self.motor_thickness])(shaft)
		return shaft

	def motor_cutout(self) -> OpenSCADObject:
		mc = cube([self.stepper_size,self.stepper_size,self.motor_thickness], center=True)
		mc += self.screws()
		mc += self.bump()
		mc += self.shaft()
		return mc

	def motor_mount(self) -> OpenSCADObject:
		mm = cube([self.total_size,self.total_size,self.total_thick], center=True)
		mm -= self.motor_cutout()
		return mm

	def bisect_floor(self,input) -> OpenSCADObject:
		size = 300
		floor = translate([0,0,-150])(cube([300,300,300],center = True))
		return input - floor


if __name__ == "__main__":
	out_dir = sys.argv[1] if len(sys.argv) > 1 else Path(__file__).parent

	e = ef.Fittings(35)
	m = mount()	
	a = m.motor_mount()
	t = e.tube()
	t = rotate(a = 90,v = (0,1,0))(t)
	t = translate([-39,0,-18])(t)
	a += t
	a = rotate(a = 25, v = (0,1,0))(a)
	a = translate([0,0,-4])(a)
	a = m.bisect_floor(a)

	file_out = scad_render_to_file(a,  out_dir=out_dir, include_orig_code=True)
	print(f"{__file__}: SCAD file written to: \n{file_out}")
 
 
************************************************/

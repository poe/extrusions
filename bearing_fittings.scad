// Generated by SolidPython 1.1.3 on 2024-01-08 23:24:51


difference() {
	translate(v = [0, 0, -11]) {
		union() {
			translate(v = [0, 0, 15]) {
				difference() {
					translate(v = [0, 0, 1]) {
						rotate(a = 45, v = [1, 0, 0]) {
							union() {
								intersection() {
									rotate(a = 45, v = [1, 0, 0]) {
										cube(center = true, size = [11.0000000000, 22, 22]);
									}
									cube(center = true, size = [11.0000000000, 22, 22]);
								}
								union() {
									translate(v = [0, 11.0000000000, 0]) {
										rotate(a = 270, v = [1, 0, 0]) {
											difference() {
												union() {
													cylinder($fn = 32, center = true, h = 15.0000000000, r = 3.9000000000);
													union() {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															rotate(a = 45, v = [0, 1, 0]) {
																cube(center = true, size = [1, 1, 1]);
															}
														}
														rotate(a = 90, v = [0, 0, 1]) {
															translate(v = [3.9000000000, 0, 7.5000000000]) {
																rotate(a = 45, v = [0, 1, 0]) {
																	cube(center = true, size = [1, 1, 1]);
																}
															}
														}
														rotate(a = 180, v = [0, 0, 1]) {
															translate(v = [3.9000000000, 0, 7.5000000000]) {
																rotate(a = 45, v = [0, 1, 0]) {
																	cube(center = true, size = [1, 1, 1]);
																}
															}
														}
														rotate(a = 270, v = [0, 0, 1]) {
															translate(v = [3.9000000000, 0, 7.5000000000]) {
																rotate(a = 45, v = [0, 1, 0]) {
																	cube(center = true, size = [1, 1, 1]);
																}
															}
														}
													}
												}
												union() {
													translate(v = [3.9000000000, 0, 7.5000000000]) {
														difference() {
															cube(center = true, size = [3, 3, 3]);
															cube(center = true, size = [1, 1, 5]);
														}
													}
													rotate(a = 90, v = [0, 0, 1]) {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															difference() {
																cube(center = true, size = [3, 3, 3]);
																cube(center = true, size = [1, 1, 5]);
															}
														}
													}
													rotate(a = 180, v = [0, 0, 1]) {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															difference() {
																cube(center = true, size = [3, 3, 3]);
																cube(center = true, size = [1, 1, 5]);
															}
														}
													}
													rotate(a = 270, v = [0, 0, 1]) {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															difference() {
																cube(center = true, size = [3, 3, 3]);
																cube(center = true, size = [1, 1, 5]);
															}
														}
													}
												}
											}
										}
									}
									translate(v = [0, 0, 11.0000000000]) {
										difference() {
											union() {
												cylinder($fn = 32, center = true, h = 15.0000000000, r = 3.9000000000);
												union() {
													translate(v = [3.9000000000, 0, 7.5000000000]) {
														rotate(a = 45, v = [0, 1, 0]) {
															cube(center = true, size = [1, 1, 1]);
														}
													}
													rotate(a = 90, v = [0, 0, 1]) {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															rotate(a = 45, v = [0, 1, 0]) {
																cube(center = true, size = [1, 1, 1]);
															}
														}
													}
													rotate(a = 180, v = [0, 0, 1]) {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															rotate(a = 45, v = [0, 1, 0]) {
																cube(center = true, size = [1, 1, 1]);
															}
														}
													}
													rotate(a = 270, v = [0, 0, 1]) {
														translate(v = [3.9000000000, 0, 7.5000000000]) {
															rotate(a = 45, v = [0, 1, 0]) {
																cube(center = true, size = [1, 1, 1]);
															}
														}
													}
												}
											}
											union() {
												translate(v = [3.9000000000, 0, 7.5000000000]) {
													difference() {
														cube(center = true, size = [3, 3, 3]);
														cube(center = true, size = [1, 1, 5]);
													}
												}
												rotate(a = 90, v = [0, 0, 1]) {
													translate(v = [3.9000000000, 0, 7.5000000000]) {
														difference() {
															cube(center = true, size = [3, 3, 3]);
															cube(center = true, size = [1, 1, 5]);
														}
													}
												}
												rotate(a = 180, v = [0, 0, 1]) {
													translate(v = [3.9000000000, 0, 7.5000000000]) {
														difference() {
															cube(center = true, size = [3, 3, 3]);
															cube(center = true, size = [1, 1, 5]);
														}
													}
												}
												rotate(a = 270, v = [0, 0, 1]) {
													translate(v = [3.9000000000, 0, 7.5000000000]) {
														difference() {
															cube(center = true, size = [3, 3, 3]);
															cube(center = true, size = [1, 1, 5]);
														}
													}
												}
											}
										}
									}
									intersection() {
										rotate(a = 45, v = [1, 0, 0]) {
											cube(center = true, size = [11.0000000000, 22, 22]);
										}
										cube(center = true, size = [11.0000000000, 22, 22]);
									}
								}
							}
						}
					}
					translate(v = [0, 0, -150]) {
						cube(center = true, size = [300, 300, 300]);
					}
				}
			}
			rotate(a = 90, v = [0, 0, 1]) {
				difference() {
					union() {
						union();
						translate(v = [-35, 0, 0]) {
							rotate(a = [0, 90.0, 0.0]) {
								translate(v = [0, 0, 35.0]) {
									cube(center = true, size = [32.0000000000, 32.0000000000, 70.0]);
								}
							}
						}
						union();
					}
					union() {
						union();
						translate(v = [-35, 0, 0]) {
							rotate(a = [0, 90.0, 0.0]) {
								translate(v = [0, 0, 10]) {
									rotate(a = -90, v = [0, -1, 0]) {
										rotate(a = 90, v = [0, 0, 1]) {
											union() {
												union();
												translate(v = [0, -10, 0]) {
													rotate(a = -90, v = [1, 0, 0]) {
														polyhedron(convexity = 10, faces = [[0, 1, 4], [1, 5, 4], [1, 2, 5], [2, 6, 5], [2, 3, 6], [3, 7, 6], [3, 0, 7], [0, 4, 7], [3, 2, 1, 0], [4, 5, 6, 7]], points = [[-15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, -15.0000000000, 0.0000000000], [-15.0000000000, -15.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000]]);
													}
												}
												translate(v = [0, 51.0, 0]) {
													rotate(a = 180, v = [1, 0, 0]) {
														translate(v = [0, -10, 0]) {
															rotate(a = -90, v = [1, 0, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 4], [1, 5, 4], [1, 2, 5], [2, 6, 5], [2, 3, 6], [3, 7, 6], [3, 0, 7], [0, 4, 7], [3, 2, 1, 0], [4, 5, 6, 7]], points = [[-15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, 15.0000000000, 0.0000000000], [15.0000000000, -15.0000000000, 0.0000000000], [-15.0000000000, -15.0000000000, 0.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000], [0.0000000000, 0.0000000000, 15.0000000000]]);
															}
														}
													}
												}
												translate(v = [0, -10, 0]) {
													rotate(a = -90, v = [1, 0, 0]) {
														union() {
															polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
															mirror(v = [0, 1]) {
																polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
															}
															mirror(v = [1, 1]) {
																union() {
																	polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	mirror(v = [0, 1]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	}
																}
															}
															mirror(v = [1, -1]) {
																union() {
																	polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	mirror(v = [0, 1]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																	}
																	mirror(v = [1, 1]) {
																		union() {
																			polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			mirror(v = [0, 1]) {
																				polyhedron(convexity = 10, faces = [[0, 1, 5], [1, 6, 5], [1, 2, 6], [2, 7, 6], [2, 3, 7], [3, 8, 7], [3, 4, 8], [4, 9, 8], [4, 0, 9], [0, 5, 9], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9]], points = [[-10.2, 10.2, 0.0], [-10.2, 2.8, 0.0], [-4.3999999999999995, 2.8, 0.0], [-4.3999999999999995, 0.0, 0.0], [0.0, 0.0, 0.0], [-10.2, 10.2, 70.0], [-10.2, 2.8, 70.0], [-4.3999999999999995, 2.8, 70.0], [-4.3999999999999995, 0.0, 70.0], [0.0, 0.0, 70.0]]);
																			}
																		}
																	}
																}
															}
														}
													}
												}
												union() {
													union();
													rotate(a = 180, v = [0, 1, 0]) {
														union() {
															translate(v = [0, 0, 14]) {
																cylinder($fn = 32, h = 4, r = 3.8750000000);
															}
															translate(v = [-3.8750000000, -12, 15]) {
																cube(size = [7.7500000000, 12, 4]);
															}
															union() {
																cylinder($fn = 16, h = 19, r = 2.0000000000);
																translate(v = [-2.0000000000, -12, 0]) {
																	cube(size = [4, 12, 19]);
																}
															}
															rotate(a = -90, v = [0, 1, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
															}
														}
													}
													rotate(a = 90, v = [0, 1, 0]) {
														union() {
															translate(v = [0, 0, 14]) {
																cylinder($fn = 32, h = 4, r = 3.8750000000);
															}
															translate(v = [-3.8750000000, -12, 15]) {
																cube(size = [7.7500000000, 12, 4]);
															}
															union() {
																cylinder($fn = 16, h = 19, r = 2.0000000000);
																translate(v = [-2.0000000000, -12, 0]) {
																	cube(size = [4, 12, 19]);
																}
															}
															rotate(a = -90, v = [0, 1, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
															}
														}
													}
													union() {
														translate(v = [0, 0, 14]) {
															cylinder($fn = 32, h = 4, r = 3.8750000000);
														}
														translate(v = [-3.8750000000, -12, 15]) {
															cube(size = [7.7500000000, 12, 4]);
														}
														union() {
															cylinder($fn = 16, h = 19, r = 2.0000000000);
															translate(v = [-2.0000000000, -12, 0]) {
																cube(size = [4, 12, 19]);
															}
														}
														rotate(a = -90, v = [0, 1, 0]) {
															polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
														}
													}
													rotate(a = 270, v = [0, 1, 0]) {
														union() {
															translate(v = [0, 0, 14]) {
																cylinder($fn = 32, h = 4, r = 3.8750000000);
															}
															translate(v = [-3.8750000000, -12, 15]) {
																cube(size = [7.7500000000, 12, 4]);
															}
															union() {
																cylinder($fn = 16, h = 19, r = 2.0000000000);
																translate(v = [-2.0000000000, -12, 0]) {
																	cube(size = [4, 12, 19]);
																}
															}
															rotate(a = -90, v = [0, 1, 0]) {
																polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															rotate(a = 180, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															rotate(a = 90, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															union() {
																translate(v = [0, 0, 14]) {
																	cylinder($fn = 32, h = 4, r = 3.8750000000);
																}
																translate(v = [-3.8750000000, -12, 15]) {
																	cube(size = [7.7500000000, 12, 4]);
																}
																union() {
																	cylinder($fn = 16, h = 19, r = 2.0000000000);
																	translate(v = [-2.0000000000, -12, 0]) {
																		cube(size = [4, 12, 19]);
																	}
																}
																rotate(a = -90, v = [0, 1, 0]) {
																	polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																}
															}
														}
													}
													translate(v = [0, 51.0, 0]) {
														rotate(a = 180, v = [1, 0, 0]) {
															rotate(a = 270, v = [0, 1, 0]) {
																union() {
																	translate(v = [0, 0, 14]) {
																		cylinder($fn = 32, h = 4, r = 3.8750000000);
																	}
																	translate(v = [-3.8750000000, -12, 15]) {
																		cube(size = [7.7500000000, 12, 4]);
																	}
																	union() {
																		cylinder($fn = 16, h = 19, r = 2.0000000000);
																		translate(v = [-2.0000000000, -12, 0]) {
																			cube(size = [4, 12, 19]);
																		}
																	}
																	rotate(a = -90, v = [0, 1, 0]) {
																		polyhedron(convexity = 10, faces = [[0, 1, 3], [1, 4, 3], [1, 2, 4], [2, 5, 4], [2, 0, 5], [0, 3, 5], [2, 1, 0], [3, 4, 5]], points = [[0.0000000000, -10.0000000000, 0.0000000000], [10.1000000000, -10.0000000000, 10.1000000000], [10.1000000000, -10.0000000000, -10.1000000000], [0.0000000000, 12.0000000000, 0.0000000000], [10.1000000000, 12.0000000000, 10.1000000000], [10.1000000000, 12.0000000000, -10.1000000000]]);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	translate(v = [0, 0, -150]) {
		cube(center = true, size = [300, 300, 300]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python3
import sys
from math import cos, radians, sin, pi, tau
from pathlib import Path

from solid import *
from solid.utils import *

from typing import Set, Sequence, List, Callable, Optional, Union, Iterable, Tuple

import numpy as np

import extrusion_fittings as ef

class HoldingBlock:
	def __init__(self,b_thickness = 7.5,i_diameter = 8,o_diameter=22,cyl_sides = 32,tolerance = .1):
		self.radius = i_diameter/2 - tolerance
		self.b_thickness = b_thickness
		self.o_diameter = o_diameter
		self.cyl_sides = cyl_sides

	def peg(self) -> OpenSCADObject:
		peg = cylinder(r=self.radius, h=self.b_thickness*2, segments = self.cyl_sides, center=True)
		nub = cube([1,1,1],center=True)
		nub = rotate(a = 45, v=(0,1,0))(nub)
		nub = translate([self.radius,0,self.b_thickness])(nub)
		nubs = nub
		nubs += rotate(a = 90, v=(0,0,1))(nub)		
		nubs += rotate(a = 180, v=(0,0,1))(nub)		
		nubs += rotate(a = 270, v=(0,0,1))(nub)		
		slot = cube([3,3,3],center=True) - cube([1,1,5],center=True)
		slot = translate([self.radius,0,self.b_thickness])(slot)
		slots = slot
		slots += rotate(a = 90, v=(0,0,1))(slot)		
		slots += rotate(a = 180, v=(0,0,1))(slot)		
		slots += rotate(a = 270, v=(0,0,1))(slot)		

		return peg + nubs - slots

	def diagonal_block(self) -> OpenSCADObject:
		upper_peg = self.peg()
		upper_peg = translate([0,0,self.o_diameter/2])(upper_peg)
		lower_peg = self.peg()
		lower_peg = rotate(a = 270, v=(1,0,0))(lower_peg)
		lower_peg = translate([0,self.o_diameter/2,0])(lower_peg)
		block = cube([self.o_diameter/2,self.o_diameter,self.o_diameter], center = True)
		block = rotate(a = 45, v=(1,0,0))(block)
		block *= cube([self.o_diameter/2,self.o_diameter,self.o_diameter], center = True)
		block += lower_peg + upper_peg + block
		block = rotate(a = 45, v=(1,0,0))(block)
		block = translate([0,0,1])(block)
		return block 

	def bisect_floor(self,input) -> OpenSCADObject:
		size = 300
		floor = translate([0,0,-150])(cube([300,300,300],center = True))
		return input - floor

if __name__ == "__main__":
	out_dir = sys.argv[1] if len(sys.argv) > 1 else Path(__file__).parent

	h = HoldingBlock()
	a = h.diagonal_block()
	a = h.bisect_floor(a)
	f = ef.Fittings(35)
	a = translate([0,0,15])(a)
	a += rotate(a=90,v=(0,0,1))(f.tube())	
	# a = rotate(a=15,v=(1,0,0))(a)
	a = translate([0,0,-11])(a)
	a = h.bisect_floor(a)

	file_out = scad_render_to_file(a,  out_dir=out_dir, include_orig_code=True)
	print(f"{__file__}: SCAD file written to: \n{file_out}")
 
 
************************************************/
